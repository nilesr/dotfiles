" *******************************************************
" SETTINGS

" Fix for syntastic
set shell=/bin/bash

" Set mouse mode.
set mouse=a

if has('mouse_sgr')
	set ttymouse=sgr
endif

" Allow backspace to remove lines.
set backspace=indent,eol,start

" Ensure we are out of crappy vi compatible mode.
set nocompatible

" Automatically change working directory to the directory of the open file.
set autochdir

" Enable syntax highlighting.
syntax on

let g:seoul256_background = 237
let g:seoul256_srgb = 1
colorscheme seoul256
" Set startup colorscheme.
if has("gui_running")
	colorscheme vizuki
endif
" Don't have vim store backup or swap files.
set nobackup
set noswapfile

" Briefly jump cursor to matching brace when typing completion brace.
set showmatch

" Decrease the time it takes to show the matching brace.
set matchtime=2

" Show line numbers by default.
set number

" Set encoding.
set encoding=utf-8

" Allow vim to recognize file types.
filetype on

" Allow vim to load plugins related to the detected file type.
filetype plugin on


" Highlight all results of a search within the file.
set hlsearch

" Set fold method to manual.
set foldmethod=manual

" Disable code folding.
set nofoldenable

" Set left and right option/alt keys to be meta keys
if has("gui_macvim")
	set macmeta
endif



" no idea
"set smartindent
set autoindent
filetype indent on
"set softtabstop=4
set shiftwidth=4
set tabstop=4
"set expandtab
set noexpandtab

autocmd FileType python setlocal shiftwidth=4 tabstop=4 noexpandtab

" Show statusline always.
set laststatus=2

" No need to add 'g' to the end of substitute patterns to replace all occurances.
set gdefault

"*******************************************************

" COMMANDS

" LN will toggle line numbers on or off.
command! LN set nonumber!

" RC will re-source this .vimrc file.
command! RC :source $MYVIMRC

" WR will force a write to a file you do not have permissions to modify.
command! WW w !sudo tee % > /dev/null

"*******************************************************

" KEY MAPPINGS

" Map ctrl+movement keys to ctrl+w followed by the movement key.
" Makes switching between split windows extremely simple.
map <C-Down> 10j
map <C-Up> 10k
map  10h
map  10l
map [B 10j
map [A 10k
map <C-j> 10j
map <C-k> 10k

" When pressing enter it will also run :noh to turn off highlights from previous search.
nnoremap <CR> :noh<CR>

""""" I feel like the following key mappings are a brute force way of navigating the document
""""" without using your eyes so I've temporarily commented them out while I try to learn some
""""" additional buffer movement and cursor movement commands in an attempt to phase the need
""""" for these "macro keys" out.

" Map uppercase movement keys to macro versions of themselves in normal and visual mode.
"nnoremap J 15j
"vnoremap J 15j
"nnoremap K 15k
"vnoremap K 15k
"nnoremap H 10h
"vnoremap H 10h
"nnoremap L 10l
"vnoremap L 10l

" Remap uppercase movement key functions to g+movement key.
"nnoremap gj J
"nnoremap gk K
"nnoremap gh H
"nnoremap gl L

" F2 will use the current tab settings to retab the whole file.
noremap <F2> :retab!<CR>

noremap gw :Autoformat<CR><CR>

"*******************************************************

" PLUGIN SETTINGS

" Invoke pathogen to load plugins.
execute pathogen#infect()

"-=-=-= localvimrc =-=-=-

" Don't ask when sourcing .lvimrc files.
let g:localvimrc_ask = 0

"-=-=-= AIRLINE/LIGHTLINE/PROMPTLINE =-=-=-

" Populate powerline symbols.
let g:airline_powerline_fonts = 1

let g:promptline_preset = {
			\'a' : [ promptline#slices#user() ],
			\'c' : [ promptline#slices#cwd() ],
			\'y' : [ promptline#slices#vcs_branch(), promptline#slices#git_status() ]}
"\'b' : [ promptline#slices#host() ],
let lightline_theme = 'jellybeans'
if has("gui_running")
	let lightline_theme = 'solarized'
endif
let g:lightline = {
			\ 'colorscheme': lightline_theme,
			\ 'component': {
			\   'readonly': '%{&readonly?"ÓÇ¢":""}',
			\ },
			\ 'separator': { 'left': 'ÓÇ∞', 'right': 'ÓÇ≤' },
			\ 'subseparator': { 'left': 'ÓÇ±', 'right': 'ÓÇ≥' },
			\ 'active': {
			\   'left': [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ]],
			\   'right': [ [ 'syntastic', 'lineinfo' ], ['percent'], [ 'fileformat', 'fileencoding', 'filetype' ] ]
			\ },
			\ 'component_function': {
			\   'fugitive': 'MyFugitive',
			\   'filename': 'MyFilename',
			\   'fileformat': 'MyFileformat',
			\   'filetype': 'MyFiletype',
			\   'fileencoding': 'MyFileencoding',
			\   'mode': 'MyMode',
			\ },
			\ 'component_expand': {
			\   'syntastic': 'SyntasticStatuslineFlag',
			\ },
			\ 'component_type': {
			\   'syntastic': 'error',
			\ },
			\ }

function! MyModified()
	return &ft =~ 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
	return &ft !~? 'help' && &readonly ? 'ÓÇ¢' : ''
endfunction

function! MyFilename()
	let fname = expand('%:t')
	return fname == 'ControlP' ? g:lightline.ctrlp_item :
				\ fname == '__Tagbar__' ? g:lightline.fname :
				\ fname =~ '__Gundo\|NERD_tree' ? '' :
				\ &ft == 'vimfiler' ? vimfiler#get_status_string() :
				\ &ft == 'unite' ? unite#get_status_string() :
				\ &ft == 'vimshell' ? vimshell#get_status_string() :
				\ ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
				\ ('' != fname ? fname : '[No Name]') .
				\ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
	try
		if expand('%:t') !~? 'Tagbar\|Gundo\|NERD' && &ft !~? 'vimfiler' && exists('*fugitive#head')
			let mark = ''  " edit here for cool mark
			let _ = fugitive#head()
			return strlen(_) ? mark._ : ''
		endif
	catch
	endtry
	return ''
endfunction

function! MyFileformat()
	return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
	return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
	return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction
function! MyMode()
	let fname = expand('%:t')
	return fname == '__Tagbar__' ? 'Tagbar' :
				\ fname == 'ControlP' ? 'CtrlP' :
				\ fname == '__Gundo__' ? 'Gundo' :
				\ fname == '__Gundo_Preview__' ? 'Gundo Preview' :
				\ fname =~ 'NERD_tree' ? 'NERDTree' :
				\ &ft == 'unite' ? 'Unite' :
				\ &ft == 'vimfiler' ? 'VimFiler' :
				\ &ft == 'vimshell' ? 'VimShell' :
				\ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! CtrlPStatusFunc_2(str)
	return lightline#statusline(0)
endfunction

let g:tagbar_status_func = 'TagbarStatusFunc'

function! TagbarStatusFunc(current, sort, fname, ...) abort
	let g:lightline.fname = a:fname
	return lightline#statusline(0)
endfunction

augroup AutoSyntastic
	autocmd!
	" set ft=text if no filetype, so syntastic will run proselint
	autocmd BufWritePre * if &filetype == "" | setlocal ft=text | endif
	autocmd BufWritePost *.c,*.cpp call s:syntastic()
augroup END
function! s:syntastic()
	SyntasticCheck
	call lightline#update()
endfunction

let g:unite_force_overwrite_statusline = 0
let g:vimfiler_force_overwrite_statusline = 0
let g:vimshell_force_overwrite_statusline = 0

"-=-=-= INDENT GUIDES =-=-=-

" Tell indent-guides plugin to start showing guides at 2 levels of indentation.
let g:indent_guides_start_level = 1

" Tell indent-guides plugin to draw guides one character in width.
let g:indent_guides_guide_size = 4

" Tell indent-guides to startup with VIM.
let g:indent_guides_enable_on_vim_startup = 1

" Set background colors manually since I rarely change my color scheme.
let g:indent_guides_auto_colors = 0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd ctermbg=237
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=236


set guifont=Droid\ Sans\ Mono\ for\ Powerline\ 10

" map control-backspace to delete the previous word
imap <C-BS> <C-W>
imap  <C-W>


let CoVim_default_name = "Niles"
let CoVim_default_port = "8802"

" Map backslash + backslash to last file
nnoremap <leader><leader> <c-^>


" Stolen from Gary Bernheart, destroyallsoftware.com - educational talks and
" videos
""""""""""""""""""""""""""""""""""""""""""""""""""""
" MULTIPURPOSE TAB KEY
" Indent if we're at the beginning of a line. Else, do completion.
""""""""""""""""""""""""""""""""""""""""""""""""""""
function! InsertTabWrapper()
	let col = col('.') - 1
	if !col || getline('.')[col - 1] !~ '\k'
		return "\<tab>"
	else
		return "\<C-P>"
	endif
endfunction
inoremap <expr> <tab> InsertTabWrapper()
inoremap <s-tab> <c-n>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" RemoveFancyCharacters COMMAND
" Remove smart quotes, etc.
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! RemoveFancyCharacters()
	let typo = {}
	let typo["‚Äú"] = '"'
	let typo["‚Äù"] = '"'
	let typo["‚Äò"] = "'"
	let typo["‚Äô"] = "'"
	let typo["‚Äì"] = '--'
	let typo["‚Äî"] = '---'
	let typo["‚Ä¶"] = '...'
	:exe ":%s/".join(keys(typo), '\|').'/\=typo[submatch(0)]/ge'
endfunction
command! Fixchars :call RemoveFancyCharacters()


filetype plugin on
au FileType html,xhtml setl ofu=htmlcomplete#CompleteTags
au FileType css setl ofu=csscomplete#CompleteCSS

" Set pastetoggle to F5
" So you can paste things without it going berserk
set pastetoggle=<F5>

" Fixes tmux
set t_ut=
" Map control + T to new tab
map <C-t> :tabnew<CR>
" Map (not in insert mode) Control+W to close a tab
noremap <C-w> :tabclose<CR>
" These two work for gvim, not so much for in the terminal
" Map control + Tab to next tab
map <C-Tab> gt
" Map control + shift + tab to last tab
map <C-S-Tab> gT

" Map control left and control right to forward and back through the tabs.
" Alt left and right move through tmux windows
nnoremap [D :tabprevious<CR>
nnoremap [C :tabnext<CR>
nnoremap <C-Left> :tabprevious<CR>
nnoremap <C-Right> :tabnext<CR>

" Lightline shows the current mode, no need to display it twice
set noshowmode

" Yanking and pasting will always use the X11 clipboard
set clipboard=unnamedplus

" Binds tab and shift-tab to tabnext and tabprev. Holding control while
" pressing these doesn't affect it.
nmap <Tab> :tabnext<CR>
nmap [Z :tabprev<CR>

" Winkeys
nmap √± ;
nmap √ë :
" Bind :t to new tab
cnoreabbrev t tabnew
" Word wrap will not break up words. Useful for editing text, not code
set linebreak

set wildmenu
set wildmode=list:longest,full



dig XO 8853 " xor A ‚äï B
dig TF 8756 " therefore ‚à¥
dig RE 8477 " set of real numbers ‚Ñù

dig xx 215 " cross product A √ó B

dig AF 8728 " after, f ‚àò g, read f after g


if !has("gui_running")
	"https://stackoverflow.com/questions/15561132/run-command-when-vim-enters-visual-mode
	" Colorize line numbers in insert and visual modes
	" ------------------------------------------------
	function! SetCursorLineNrColorInsert(mode)
		if a:mode == "i"
			"Tmuxline lightline_insert
			call system("tmux source ~/.tmux_theme.insert")
		elseif a:mode == "r"
			"Tmuxline lightline_replace
			call system("tmux source ~/.tmux_theme.replace")
		endif

	endfunction


	function! SetCursorLineNrColorVisual()
		set updatetime=0
		"Tmuxline lightline_visual
		call system("tmux source ~/.tmux_theme.visual")
		return ''
	endfunction

	function! ResetCursorLineNrColor()
		set updatetime=4000
		"Tmuxline lightline
		call system("tmux source ~/.tmux_theme.normal")
	endfunction

	vnoremap <silent> <expr> <SID>SetCursorLineNrColorVisual SetCursorLineNrColorVisual()
	nnoremap <silent> <script> v v<SID>SetCursorLineNrColorVisual<left><right>
	nnoremap <silent> <script> V V<SID>SetCursorLineNrColorVisual<left><right>
	nnoremap <silent> <script> <C-v> <C-v><SID>SetCursorLineNrColorVisual<left><right>

	" Set to normal mode on start, reset to old defaults on exit
	call system("tmux source ~/.tmux_theme.normal")
	function! TmuxReset()
		call system("tmux source ~/.tmux_theme")
	endfunction

	augroup CursorLineNrColorSwap
		autocmd!
		autocmd InsertEnter * call SetCursorLineNrColorInsert(v:insertmode)
		autocmd InsertLeave * call ResetCursorLineNrColor()
		autocmd CursorHold * call ResetCursorLineNrColor()
		autocmd VimLeavePre * call TmuxReset()
	augroup END
endif


" either of these two sets work, but one only requires one bind
" C-r 0 pastes, C-r C-w inserts word under cursor

"vnoremap <C-s> y:!aspell -a <<< <C-r>0<Home><right>
"nmap <C-s> viw<C-s><CR>

nmap <C-s> :!aspell -a <<< <C-r><C-w><CR>


function! Toggle()
	set invcursorline
	call indent_guides#toggle()
endfunction

nmap <Leader>q :call Toggle()<CR>


let g:mustache_abbreviations = 1

" might disable later if it gets annoying
"au BufWrite * :Autoformat
" it got annoying


let g:syntastic_c_compiler_options = '-std=gnu11 -fms-extensions '|". system('python3-config --includes')

dig NI 8713 " not in, ‚àâ
dig BR 8477 " Blackboard bold R ‚Ñù
dig BQ 8474 " Blackboard bold Q ‚Ñö
dig BN 8469 " Blackboard bold N ‚Ñï
dig BC 8450 " Blackboard bold C ‚ÑÇ
dig BZ 8484 " Blackboard bold Z ‚Ñ§
dig AP 8776 " Approximately equal to ‚âà
let g:syntastic_cobol_compiler_options = '-Wall'
"let g:syntastic_debug = 33
let g:syntastic_texinfo_checkers = ['proselint']
let g:syntastic_help_checkers = ['proselint']
let g:syntastic_tex_checkers = ['proselint']
let g:syntastic_nroff_checkers = ['proselint']
let g:syntastic_markdown_checkers = ['proselint']
let g:syntastic_asciidoc_checkers = ['proselint']
"let g:syntastic_xhtml_checkers = ['proselint']
let g:syntastic_html_checkers = ['proselint']
let g:syntastic_text_checkers = ['proselint']
let g:syntastic_rst_checkers = ['proselint']
let g:syntastic_pod_checkers = ['proselint']

set ignorecase
set infercase
"set complete=k~/.vim/ocreserved.lis

autocmd BufNewFile *.cob 0r ~/.vim/template.cob

" tell DrawIt to default to unicode characters
"call DrawIt#SetMode('S')
"unmap <Leader>di
"map <Leader>di :call DrawIt#SetMode('S')
